# GitHub Action for Symfony with MySQL
name: PHPUnit Tests
on: [pull_request]
jobs:
  symfony:
    name: PHP ${{ matrix.php-versions }}
    runs-on: ubuntu-latest

    # Docs: https://docs.github.com/en/actions/using-containerized-services
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: symfony
          MYSQL_DATABASE: symfony
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.1', '8.2']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Docs: https://github.com/shivammathur/setup-php
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: phpunit-bridge
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug

      # Local MySQL service in GitHub hosted environments is disabled by default.
      # If you are using it instead of service containers, make sure you start it.
      # - name: Start mysql service
      #   run: sudo systemctl start mysql.service

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run Migration
        run: |
          php bin/console --env=test doctrine:database:drop --if-exists --force
          php bin/console --env=test doctrine:database:create
          php bin/console --env=test doctrine:schema:create

#          composer require --dev symfony/orm-pack
#          php bin/console doctrine:schema:update --force || echo "No migrations found or schema update failed"
#          php bin/console doctrine:migrations:migrate || echo "No migrations found or migration failed"
        env:
          DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony

      - name: Install PHPUnit
        run: simple-phpunit install

      - name: Run tests
        run: simple-phpunit --coverage-text
        env:
          DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony
