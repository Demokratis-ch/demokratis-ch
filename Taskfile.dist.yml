# See https://taskfile.dev
# Create your own local Taskfile.yml to override/add tasks
version: '3'

tasks:
  schema_update:
    desc: Updates the DB schema
    cmds:
      - 'php bin/console doctrine:schema:update --force'
      - 'php bin/console --env=test doctrine:schema:update --force'

  watch:
    desc: Starts the watcher for frontend build
    cmds:
      - 'npm run watch'

  reset_db:
    desc: Resets the DB and loads fixtures
    cmds:
      - 'php bin/console doctrine:schema:drop --force --full-database'
      - 'php bin/console doctrine:schema:create'
      - 'php bin/console doctrine:fixtures:load --append'

  install:
    desc: Installs dependencies (php and js)
    cmds:
      - 'composer install'
      - 'npm install'

  build_dev:
    desc: Dev build
    cmds:
      - task: install
      - 'npm run dev'

  tests:
    desc: Runs the test suite
    cmds:
      - 'php bin/phpunit'

  import:
    desc: Gets consultations and documents from Fedlex API
    cmds:
      - 'php bin/console app:consultations:pull'
      - 'php bin/console app:consultations:documents'
      - 'php bin/console app:consultations:files'

  csfixer:
    desc: Formats all php code using csfixer
    cmds:
      - 'php vendor/bin/php-cs-fixer fix'

  psalm:
    desc: Runs static analysis with psalm
    cmds:
      - 'php vendor/bin/psalm --no-cache'

  checks:
    desc: Runs code formatting, static analysis and unit tests (run before committing!)
    deps: [psalm, tests]
    cmds:
      - task: csfixer

  migrations:
    desc: Runs migrations
    cmds:
      - 'php bin/console doctrine:migrations:migrate --no-interaction'
      - 'php bin/console --env=test doctrine:migrations:migrate --no-interaction'

  fake_migrations:
    desc: Pretends that the migrations have run
    cmds:
      - 'php bin/console doctrine:migrations:sync-metadata-storage'
      - 'php bin/console doctrine:migrations:version --add --all --no-interaction'

  generate_schema_diagram:
    desc: Generate the db schema diagram mermaid code
    cmds:
      - |
        docker run \
         --mount type=bind,source="$(pwd)",target=/home/schcrwlr/share \
         --network demokratis_default \
         --rm -it \
         schemacrawler/schemacrawler \
         /opt/schemacrawler/bin/schemacrawler.sh \
         --server mysql \
         --host database \
         --port 3306 \
         --database app \
         --schemas app \
         --user root \
         --password root \
         --info-level standard \
         --command script \
         --parents 1 \
         --script-language python \
         --script mermaid.py \
         --output-file share/sc.mmd
      - echo -e "#demokratis database schema diagram\n\n\`\`\`mermaid" > db_schema.md
      - cat sc.mmd >> db_schema.md
      - echo -e "\`\`\`" >> db_schema.md
      - rm sc.mmd
