security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppFormLoginAuthenticator
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            switch_user: true
            login_link:
                check_route: app_login_check
                signature_properties: ['id', 'email']

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

    # Role hierarchy
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/api, roles: ROLE_ADMIN }
        # Login for comments
        - { path: ^/c/add, roles: ROLE_USER }
        # Login to create a statement
        - { path: ^/statement/new, roles: ROLE_USER }
        # Login to edit paragraphs
        - { path: ^/p/refuse, roles: ROLE_USER }
        - { path: ^/p/accept, roles: ROLE_USER }
        # Login to import legal texts
        - { path: ^/d/, roles: ROLE_USER }
        # Login to add or create tags
        - { path: ^/tag/, roles: ROLE_USER }
        # Login to accept invitations
        - { path: ^/invite/accept/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
